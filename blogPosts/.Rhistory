ggplot(heightweight, aes(x = ageYear, y = heightIn)) + geom_point() + theme(panel.background = element_blank())
ggplot(heightweight, aes(x = ageYear, y = heightIn, colour = sex)) + geom_point()
ggplot(heightweight, aes(x = ageYear, y = heightIn, colour = sex)) + geom_point() + theme(panel.background = element_blank())
install.packages("hexbin")
getwd()
setwd("/Users/mehrdadyazdani/Documents/DriveCam project/vehicleID/rsripts")
load("../processedData/multiple_day_vehicle/days_1-3_partition_1.Rda")
library(data.table)
library(plyr)
num.records = sapply(car.DF, nrow)
ble = car.DF[[1]]
names(ble)
vehicleID = sapply(car.DF, FUN = function(x) return(x$VehicleProfileId[1]))
head(vehicleID)
car.DF[[2]]
head(which(is.na(vehicleID)))
head(num.records)
num.records[which(is.na(vehicleID))] = NA
head(num.records)
data.summaries = data.frame(num.records, vehicleID)
head(data.summaries)
ggplot(data.summaries, aes(x = num.records)) + geom_histogram(fill = "white", colour = "black") + facet_grid(vehicleID ~ .)
ggplot(na.omit(data.summaries), aes(x = num.records)) + geom_histogram(fill = "white", colour = "black") + facet_wrap(~vehicleID, ncol = 2)
data.summaries = subset(data.summaries, vehicleID != 0 & vehicleID != 11)
summary(as.factor(data.summaries$vehicleID))
ggplot(na.omit(data.summaries), aes(x = num.records)) + geom_histogram(fill = "white", colour = "black") + facet_wrap(~vehicleID, ncol = 2)
ggplot(na.omit(data.summaries), aes(x = num.records)) + geom_histogram(fill = "white", colour = "black") + facet_wrap(~vehicleID, ncol = 2, scales = "free")
binsize = diff(range(data.summaries$num.records))/50
head(binsize)
binsize
binsize = diff(range(data.summaries$num.records))/100
binsize
binsize = diff(range(data.summaries$num.records))/150
binsize
ggplot(na.omit(data.summaries), aes(x = num.records)) + geom_histogram(fill = "white", colour = "black", binwidth = binsize) + facet_wrap(~vehicleID, ncol = 2, scales = "free")
binsize = diff(range(data.summaries$num.records))/50
ggplot(na.omit(data.summaries), aes(x = num.records)) + geom_histogram(fill = "white", colour = "black", binwidth = binsize) + facet_wrap(~vehicleID, ncol = 2, scales = "free")
binsize
low.trig.index = which(num.records < 300)
length(low.trig.index)
ggplot(na.omit(data.summaries[low.trig.index,]), aes(x = num.records)) + geom_histogram(fill = "white", colour = "black", binwidth = binsize) + facet_wrap(~vehicleID, ncol = 2, scales = "free")
ggplot(na.omit(data.summaries[low.trig.index,]), aes(x = num.records)) + geom_histogram(fill = "white", colour = "black") + facet_wrap(~vehicleID, ncol = 2, scales = "free")
head(data.summaries)
head(data.summaries[low.trig.index,])
length(num.records < 300)
head(num.records < 300)
head(na.omit(data.summaries)[low.trig.index,])
head(num.records[low.trig.index])
head(num.records)
head(num.records[low.trig.index], 10)
head(num.records, 10)
head(low.trig.index, 10)
head(data.summaries, n = 10)
low.trig.index = which(data.summaries$num.records < 300)
head(data.summaries[low.trig.index,])
ggplot(na.omit(data.summaries[low.trig.index,]), aes(x = num.records)) + geom_histogram(fill = "white", colour = "black") + facet_wrap(~vehicleID, ncol = 2, scales = "free")
length(low.trig.index)
nrow(data.summaries)
nrow(na.omit(data.summaries))
head(num.records)
head(which(data.summaries$num.records < 300))
head(which(num.records<300))
car.DF.na.omitted = car.DF[which(is.na(num.records))]
length(car.DF)
length(car.DF.na.omitted)
car.DF.na.omitted = car.DF[which(!is.na(num.records))]
length(car.DF.na.omitted)
ncol(car.DF.na.omitted[[1]])
car.DF.low.triggers = lapply(car.DF.na.omitted, FUN = function(x) iflse(nrow(x)< 200, x, rep(NA, 9)))
car.DF.low.triggers = lapply(car.DF.na.omitted, FUN = function(x) ifelse(nrow(x)< 200, x, rep(NA, 9)))
car.DF.low.triggers = lapply(car.DF.na.omitted, FUN = function(x) ifelse(nrow(x)< 200, data.frame(x), data.frame(rep(NA, 9))))
num.trig.DF.na.omitted = sapply(car.DF.na.omitted, nrow)
car.DF.low.triggers = ldply(car.DF.na.omitted[num.trig.DF.na.omitted < 300])
length(unique(car.DF.low.triggers$SerialNumber))
nrow(car.DF.low.triggers)
head(car.DF.low.triggers)
car.DF.low.triggers$SerialNumber = as.factor(car.DF.low.triggers$SerialNumber)
summary(car.DF.low.triggers$SerialNumber)
car.DF.low.triggers$VehicleProfileId = as.factor(car.DF.low.triggers$VehicleProfileId)
summary(car.DF.low.triggers$VehicleProfileId)
car.DF.low.triggers = subset(car.DF.low.triggers, (VehicleProfileId != 0) & (VehicleProfileId != 11) )
summary(car.DF.low.triggers$VehicleProfileId)
car.DF.low.triggers$VehicleProfileId = factor(car.DF.low.triggers$VehicleProfileId)
summary(car.DF.low.triggers$VehicleProfileId)
levels(car.DF.low.triggers$VehicleProfileId) = c("1", "1", "3", "3", "5", "5", "7", "7", "9", "9")
summary(car.DF.low.triggers$VehicleProfileId)
names(car.DF.low.triggers)
p = ggplot(car.DF.low.triggers, aes(x = MeanAccel, y = MaxAccel, colour = VehicleProfileId)) + geom_point()
p + facet_wrap(~VehicleProfileId)
names(car.DF)
names(car.DF.low.triggers)
car.DF.low.triggers$MaxFwd = car.DF.low.triggers$MaxFwdAccelMagnitude - abs(car.DF.low.triggers$MeanFwdAccelAtTrigger)
car.DF.low.triggers$MaxLat = car.DF.low.triggers$MaxLatAccelMagnitude - abs(car.DF.low.triggers$MeanLatAccelAtTrigger)
car.DF.low.triggers$MaxAccel = sqrt(car.DF.low.triggers$MaxFwd^2 + car.DF.low.triggers$MaxLat^2)
car.DF.low.triggers$MeanAccel = sqrt(car.DF.low.triggers$MeanFwdAccelAtTrigger^2 + car.DF.low.triggers$MeanLatAccelAtTrigger^2)
p = ggplot(car.DF.low.triggers, aes(x = MeanAccel, y = MaxAccel, colour = VehicleProfileId)) + geom_point()
p + facet_wrap(~VehicleProfileId)
names(car.DF.low.triggers)
p = ggplot(car.DF.low.triggers, aes(x = MeanAccel, y = MaxAccel, colour = SmartTriggerLabe)) + geom_point()
p + facet_wrap(~VehicleProfileId)
p = ggplot(car.DF.low.triggers, aes(x = MeanAccel, y = MaxAccel, colour = SmartTriggerLabel)) + geom_point()
p + facet_wrap(~VehicleProfileId)
p = ggplot(car.DF.low.triggers, aes(x = MeanAccel, y = MaxAccel, colour = SmartTriggerLabel)) + geom_point(alpha = .1)
p + facet_wrap(~VehicleProfileId)
p = ggplot(car.DF.low.triggers, aes(x = MeanAccel, y = MaxAccel, colour = VehicleProfileId)) + geom_point(alpha = .3)
p + facet_wrap(~SmartTriggerLabel)
car.DF.below.thresh = subset(car.DF.low.triggers, car.DF.low.triggers$MeanAccel < .19)
car.DF.above.thresh = subset(car.DF.low.triggers, car.DF.low.triggers$MeanAccel >= .19)
p = ggplot(car.DF.below.thresh, aes(x = MeanAccel, y = MaxAccel, colour = VehicleProfileId)) + geom_point(alpha = .5)
p + facet_wrap(~SmartTriggerLabel)
p = ggplot(car.DF.above.thresh, aes(x = MeanAccel, y = MaxAccel, colour = VehicleProfileId)) + geom_point(alpha = .5)
p + facet_wrap(~SmartTriggerLabel)
p = ggplot(car.DF.above.thresh, aes(x = MeanAccel, y = MaxAccel, colour = VehicleProfileId)) + geom_point(alpha = .5)
p + facet_wrap(~SmartTriggerLabel, scales = "free")
p = ggplot(car.DF.above.thresh, aes(x = MeanAccel, y = MaxAccel, colour = VehicleProfileId)) + geom_point(alpha = .5)
p + facet_wrap(~SmartTriggerLabel, scales = "free") + guides(fill = guide_legend(override.aes= list(alpha = 1)))
p = ggplot(car.DF.below.thresh, aes(x = MeanAccel, y = MaxAccel, colour = VehicleProfileId)) + geom_point(alpha = .2)
p + facet_wrap(~SmartTriggerLabel, scales = "free") + guides(fill = guide_legend(override.aes= list(alpha = 1)))
p = ggplot(car.DF.above.thresh, aes(x = MeanAccel, y = MaxAccel, colour = VehicleProfileId)) + geom_point(alpha = .2)
p + guides(fill = guide_legend(override.aes= list(alpha = 1))) + facet_wrap(~SmartTriggerLabel, scales = "free")
p = ggplot(car.DF.below.thresh, aes(x = MeanAccel, y = MaxAccel, colour = VehicleProfileId)) + geom_point(alpha = .2) + guides(fill = guide_legend(override.aes= list(alpha = 1)))
p + facet_wrap(~SmartTriggerLabel, scales = "free")
p = ggplot(car.DF.below.thresh, aes(x = MeanAccel, y = MaxAccel, colour = SmartTriggerLabel)) + geom_point(alpha = .2) + guides(fill = guide_legend(override.aes= list(alpha = 1)))
p + facet_wrap(~VehicleProfileId, scales = "free")
source('~/Desktop/getting_tag_results.R')
cities[2]
tags[1]
source('~/Desktop/getting_tag_results.R')
for (i in c(1:10)){ tot[i] = nrow(read.table(paste("./Desktop/cities tags/Lev_selected_selfies_AT.txt", sep = "")))}
sum(tot)
tot = vector()
getwd()
res = read.csv("./Downloads/Batch_1383006_batch_results.csv", header = TRUE, stringsAsFactors = FALSE)
head(res)
res[,c("Input.image_url", "Answer.Tag1")] -> two.worker.batch
head(two.worker.batch)
reasonable.response = subset(two.worker.batch, grepl("F", Answer.Tag1) | grepl("f", Answer.Tag1) | grepl("M", Answer.Tag1) | grepl("m", Answer.Tag1))
top.100 = read.csv("./Downloads/selfies_guesses.csv", header = FALSE, stringsAsFactors = FALSE)
head(top.100)
nrow(top.100)
top.100
head(top.100)
head(reasonable.response)
k = 1
getwd()
setwd("/mnt/DriveScience/myazdani/scripts/")
setwd("/Users/mehrdadyazdani/Documents/DriveCam project/vehicleID/sripts")
getwd()
setwd("/Users/mehrdadyazdani/Documents/DriveCam project/vehicleID/scripts/")
setwd("/Users/mehrdadyazdani/Documents/DriveCam project/vehicleID/scripts/")
source("featureExtractionFunctions_v3.R")
library(plyr)
file.names = list.files(inpath)
inpath = "../processedData/multiple_day_vehicle/"
file.names = list.files(inpath)
file.names
k = 1
ls()
load(paste(inpath, file.names[k], sep = ""))
ls()
class(car.DF)
a.vehicle = car.DF[[1]]
class(a.vehicle)
head(a.vehicle)
summary(as.factor(as.date(a.vehicle$RecordDate)))
summary(as.factor(as.character(as.date(a.vehicle$RecordDate))))
summary(as.date(a.vehicle$RecordDate))
?as.date
??as.date
summary(as.factor(as.Date(a.vehicle$RecordDate)))
a.vehicle$MaxFwd = a.vehicle$MaxFwdAccelMagnitude - abs(a.vehicle$MeanFwdAccelAtTrigger)
a.vehicle$MaxLat = a.vehicle$MaxLatAccelMagnitude - abs(a.vehicle$MeanLatAccelAtTrigger)
a.vehicle$MaxAccel = sqrt(a.vehicle$MaxFwd^2 + a.vehicle$MaxLat^2)
a.vehicle$MeanAccel = sqrt(a.vehicle$MeanFwdAccelAtTrigger^2 + a.vehicle$MeanLatAccelAtTrigger^2)
head(a.vehicle)
summary(a.vehicle)
library(ggplot2)
ggplot(a.vehicle, aes(x=MeanAccel, y = MaxAccel, colour = SmartTriggerLabel)) + geom_point()
a.vehicle = car.DF[[10]]
a.vehicle$MaxFwd = a.vehicle$MaxFwdAccelMagnitude - abs(a.vehicle$MeanFwdAccelAtTrigger)
a.vehicle$MaxLat = a.vehicle$MaxLatAccelMagnitude - abs(a.vehicle$MeanLatAccelAtTrigger)
a.vehicle$MaxAccel = sqrt(a.vehicle$MaxFwd^2 + a.vehicle$MaxLat^2)
a.vehicle$MeanAccel = sqrt(a.vehicle$MeanFwdAccelAtTrigger^2 + a.vehicle$MeanLatAccelAtTrigger^2)
#a.vehicle <- subset(a.vehicle, MeanAccel > .19)
if (nrow(a.vehicle) < 2) return (NA)
a.vehicle[a.vehicle$SmartTriggerLabel == "Accelerating","dynamic"] = 1
a.vehicle[a.vehicle$SmartTriggerLabel == "Braking","dynamic"] = 2
a.vehicle[a.vehicle$SmartTriggerLabel == "Collision","dynamic"] = 3
nrow(a.vehicle)
a.vehicle = car.DF[[11]]
nrow(a.vehicle)
a.vehicle$MaxFwd = a.vehicle$MaxFwdAccelMagnitude - abs(a.vehicle$MeanFwdAccelAtTrigger)
a.vehicle$MaxLat = a.vehicle$MaxLatAccelMagnitude - abs(a.vehicle$MeanLatAccelAtTrigger)
a.vehicle$MaxAccel = sqrt(a.vehicle$MaxFwd^2 + a.vehicle$MaxLat^2)
a.vehicle$MeanAccel = sqrt(a.vehicle$MeanFwdAccelAtTrigger^2 + a.vehicle$MeanLatAccelAtTrigger^2)
#a.vehicle <- subset(a.vehicle, MeanAccel > .19)
a.vehicle$MaxFwd = a.vehicle$MaxFwdAccelMagnitude - abs(a.vehicle$MeanFwdAccelAtTrigger)
a.vehicle$MaxLat = a.vehicle$MaxLatAccelMagnitude - abs(a.vehicle$MeanLatAccelAtTrigger)
a.vehicle$MaxAccel = sqrt(a.vehicle$MaxFwd^2 + a.vehicle$MaxLat^2)
a.vehicle$MeanAccel = sqrt(a.vehicle$MeanFwdAccelAtTrigger^2 + a.vehicle$MeanLatAccelAtTrigger^2)
#a.vehicle <- subset(a.vehicle, MeanAccel > .19)
if (nrow(a.vehicle) < 2) return (NA)
a.vehicle[a.vehicle$SmartTriggerLabel == "Accelerating","dynamic"] = 1
a.vehicle[a.vehicle$SmartTriggerLabel == "Braking","dynamic"] = 2
a.vehicle[a.vehicle$SmartTriggerLabel == "Collision","dynamic"] = 3
a.vehicle[a.vehicle$SmartTriggerLabel == "Left Cornering","dynamic"] = 4
a.vehicle[a.vehicle$SmartTriggerLabel == "Other","dynamic"] = 5
a.vehicle[a.vehicle$SmartTriggerLabel == "Right Cornering","dynamic"] = 6
a.vehicle[a.vehicle$SmartTriggerLabel == "Rough/Uneven Surface","dynamic"] = 7
ggplot(a.vehicle, aes(x=MeanAccel, y = MaxAccel, colour = SmartTriggerLabel)) + geom_point()
bleh = statDynamics(a.vehicle)
length(bleh)
head(bleh)
names(bleh)
statDynamics <- function(vehicle.df) {
stat.feautre = with(vehicle.df, c(
robust.max(MaxFwdAccelMagnitude),
robust.max(MaxLatAccelMagnitude),
robust.max(MeanFwdAccelAtTrigger),
robust.max(MeanLatAccelAtTrigger),
-robust.max(-MeanFwdAccelAtTrigger),
-robust.max(-MeanLatAccelAtTrigger),
robust.max(MeanAccel),
robust.max(MaxAccel),
summary(MaxFwdAccelMagnitude)[2:6],
summary(MaxLatAccelMagnitude)[2:6],
summary(MeanFwdAccelAtTrigger)[2:6],
summary(MeanLatAccelAtTrigger)[2:6],
summary(MeanAccel)[2:6],
summary(MaxAccel)[2:6]
))
names(stat.feature)[1:8] = c("Robust.Max.MaxFwdAccelMagnitude", "Robust.Max.MaxLatAccelMagnitude",
"Robust.Max.MeanFwdAccelAtTrigger", "Robust.Max.MeanLatAccelAtTrigger",
"Robust.Min.MeanFwdAccelAtTrigger", "Robust.Min.MeanLatAccelAtTrigger",
"Robust.Max.MeanAccel", "Robust.Max.MaxAccel")
names.of.summaries = names(stat.feature)[9:length(stat.feature)]
names(stat.feature)[9:length(stat.feature)] =c( paste("MaxFwdAccelMagnitude.", names.of.summaries[1:5], sep = ""),
paste("MaxLatAccelMagnitude.", names.of.summaries[6:10], sep = ""),
paste("MeanFwdAccelAtTrigger.", names.of.summaries[11:15], sep = ""),
paste("MeanLatAccelAtTrigger.", names.of.summaries[16:20], sep = ""),
paste("MeanAccel.", names.of.summaries[21:25], sep = ""),
paste("MaxAccel.", names.of.summaries[26:30], sep = ""))
return(stat.feature)
}
bleh = statDynamics(a.vehicle)
source('~/Documents/DriveCam project/vehicleID/scripts/featureExtractionFunctions_v3.R')
bleh = statDynamics(a.vehicle)
names(bleh)
bleh = signal.dependent.model(a.vehicle)
names(bleh)
bleh = signal.dependent.model(a.vehicle)
names(bleh)
source('~/Documents/DriveCam project/vehicleID/scripts/featureExtractionFunctions_v3.R')
names(bleh)
bleh = signal.dependent.model(a.vehicle)
names(bleh)
source('~/Documents/DriveCam project/vehicleID/scripts/featureExtractionFunctions_v3.R')
bleh = signal.dependent.model(a.vehicle)
names(bleh)
vehicle.df = a.vehicle
names(vehicle.df)
dynamic.table = table(vehicle.df$dynamic)
head(dynamic.table)
dynamic.dist = rep(-1, 7)
names(dynamic.dist) = c("1", "2", "3", "4", "5", "6", "7")
dynamic.dist[names(dynamic.table)] = dynamic.table/sum(dynamic.table)
dynamic.dist
dynamic.dist = rep(-1, 7)
dynamic.dist
names(dynamic.table)
dynamic.table
dynamic.dist[names(dynamic.table)] = dynamic.table/sum(dynamic.table)
dynamic.dist
dynamic.dist = rep(-1, 7)
dynamic.dist
names(dynamic.dist) = c("1", "2", "3", "4", "5", "6", "7")
dynamic.dist[names(dynamic.table)] = dynamic.table/sum(dynamic.table)
dynamic.dist
dynamic.rank = names(dynamic.table[order(dynamic.table, decreasing = TRUE)])
dynamic.rank
class(a.vehicle$dynamic)
head(a.vehicle)
head(a.vehicle, 10)
head(a.vehicle, 20)
tail(a.vehicle, 10)
tail(a.vehicle[a.vehicle$dynamic == 4], 10)
tail(a.vehicle[a.vehicle$dynamic == 4,], 10)
source('~/Documents/DriveCam project/vehicleID/scripts/featureExtractionFunctions_v3.R')
bleh = dynamic.stat(a.vehicle)
names(bleh)
source('~/Documents/DriveCam project/vehicleID/scripts/featureExtractionFunctions_v3.R')
source('~/Documents/DriveCam project/vehicleID/scripts/featureExtractionFunctions_v3.R')
bleh = dynamic.stat(a.vehicle)
names(bleh)
source('~/Documents/DriveCam project/vehicleID/scripts/featureExtractionFunctions_v3.R')
bleh = dynamic.stat(a.vehicle)
names(bleh)
head(a.vehicle)
summary(as.factor(a.vehicle$dynamic))
bleh = dynamic.stat(a.vehicle)
bleh
plot(t(bleh))
class(bleh)
plot(bleh)
source('~/Documents/DriveCam project/vehicleID/scripts/featureExtractionFunctions_v3.R')
source('~/Documents/DriveCam project/vehicleID/scripts/featureExtractionFunctions_v3.R')
bleh = dynamic.stat(a.vehicle)
plot(bleh)
a.vehicle.copy = a.vehicle
a.vehicle.copy[a.vehicle$dynamic == 5, ] =null
a.vehicle.copy[a.vehicle$dynamic == 5, ] = NULL
head(a.vehicle.copy[a.vehicle$dynamic == 5, ])
a.vehicle.copy[which(a.vehicle$dynamic == 5), ] = NULL
a.vehicle.copy = a.vehicle[-which(a.vehicle$dynamic == 5),]
summary(as.factor(a.vehicle.copy$dynamic))
bleh = dynamic.stat(a.vehicle.copy)
plot(bleh)
bleh
source('~/Documents/DriveCam project/vehicleID/scripts/featureExtractionFunctions_v3.R')
bleh = dynamic.stat(a.vehicle.copy)
plot(bleh)
bleh = multinomial.dist(a.vehicle.copy)
bleh
source('~/Documents/DriveCam project/vehicleID/scripts/featureExtractionFunctions_v3.R')
bleh = multinomial.dist(a.vehicle.copy)
bleh
names(bleh)
names(bleh)[1:7] = paste("dynamic.rank.", as.character(c(1:7)), sep = "")
names(bleh)
bleh = multinomial.dist(a.vehicle.copy)
names(bleh)
source('~/Documents/DriveCam project/vehicleID/scripts/featureExtractionFunctions_v3.R')
bleh = multinomial.dist(a.vehicle.copy)
source('~/Documents/DriveCam project/vehicleID/scripts/featureExtractionFunctions_v3.R')
names(bleh)
source('~/Documents/DriveCam project/vehicleID/scripts/featureExtractionFunctions_v3.R')
bleh = multinomial.dist(a.vehicle.copy)
names(bleh)
bleh
bleh = trigger.features(a.vehicle.copy)
bleh
names(bleh)
vehicle.df = a.vehicle.copy
time.stamps = vehicle.df$RecordDate
time.stamps.decimal = unclass(as.POSIXct(time.stamps))
vehicle.df$time.stamps = time.stamps
vehicle.df$time.stamps.decimal = time.stamps.decimal
max.time = vehicle.df$time.stamps.decimal[nrow(vehicle.df)] - vehicle.df$time.stamps.decimal[1]
trigger.rate.per.hour = table(cut(as.POSIXlt(vehicle.df$RecordDate), breaks = "hour"))
sorted.hours = as.POSIXlt(names(trigger.rate.per.hour[order(trigger.rate.per.hour, decreasing = TRUE)]))
top.list = 8
top.hours = if(length(sorted.hours) < top.list) c(unclass(sorted.hours)$hour, rep(-1,top.list - length(sorted.hours))) else unclass(sorted.hours)$hour[1:top.list]
vehicle.df$tr.15 = factor(cut(as.POSIXlt(vehicle.df$RecordDate), breaks = "15 mins"))
dynamic.trigger = by(vehicle.df, vehicle.df$tr.15, FUN = function(x) return(c(max(x$MaxAccel), max(x$MeanAccel), nrow(x))), simplify=FALSE)
rate.df = as.data.frame(matrix(unlist(unclass(dynamic.trigger)), nrow = length(dynamic.trigger), byrow = T))
count.model = glm(V3 ~ ., family = "poisson", data = rate.df)
trigger.rate = table(vehicle.df$tr.1)
head(rate.df)
head(dynamic.trigger)
bleh = trigger.features(a.vehicle.copy)
names(bleh)
source('~/.active-rstudio-document')
source('~/Documents/DriveCam project/vehicleID/scripts/featureExtractionFunctions_v3.R')
bleh = trigger.features(a.vehicle.copy)
names(bleh)
head(a.vehicle.copy)
bleh = cov(a.vehicle.copy[,c("MeanAccel", "MaxAccel")])
bleh
bleh[1,1]
bleh[1,2]
bleh[2,2]
source('~/Documents/DriveCam project/vehicleID/scripts/featureExtractionFunctions_v3.R')
bleh = compute.cov(a.vehicle.copy)
bleh
source('~/Documents/DriveCam project/vehicleID/scripts/featureExtractionFunctions_v3.R')
bleh = compute.dynamic.cov(a.vehicle.copy)
bleh
plot(bleh)
ls
ls()
source('~/Documents/DriveCam project/vehicleID/scripts/featureExtractionFunctions_v3.R')
bleh = markov.chain.fit(a.vehicle)
bleh
source('~/Documents/DriveCam project/vehicleID/scripts/featureExtractionFunctions_v3.R')
bleh = markov.chain.fit(a.vehicle)
bleh
bleh = c(statDynamics(a.vehicle), multinomial.dist(a.vehicle))
bleh
a.vehicle = car.DF[[1]]
getFeatures <- function(a.vehicle) {
#a.vehicle = subset(a.vehicle, (VehicleProfileId != 0) & (VehicleProfileId != 11) & (VehicleProfileId != 1) & (VehicleProfileId != 2))
a.vehicle$MaxFwd = a.vehicle$MaxFwdAccelMagnitude - abs(a.vehicle$MeanFwdAccelAtTrigger)
a.vehicle$MaxLat = a.vehicle$MaxLatAccelMagnitude - abs(a.vehicle$MeanLatAccelAtTrigger)
a.vehicle$MaxAccel = sqrt(a.vehicle$MaxFwd^2 + a.vehicle$MaxLat^2)
a.vehicle$MeanAccel = sqrt(a.vehicle$MeanFwdAccelAtTrigger^2 + a.vehicle$MeanLatAccelAtTrigger^2)
a.vehicle <- subset(a.vehicle, MeanAccel > 0)
a.vehicle[a.vehicle$SmartTriggerLabel == "Accelerating","dynamic"] = 1
a.vehicle[a.vehicle$SmartTriggerLabel == "Braking","dynamic"] = 2
a.vehicle[a.vehicle$SmartTriggerLabel == "Collision","dynamic"] = 3
a.vehicle[a.vehicle$SmartTriggerLabel == "Left Cornering","dynamic"] = 4
a.vehicle[a.vehicle$SmartTriggerLabel == "Other","dynamic"] = 5
a.vehicle[a.vehicle$SmartTriggerLabel == "Right Cornering","dynamic"] = 6
a.vehicle[a.vehicle$SmartTriggerLabel == "Rough/Uneven Surface","dynamic"] = 7
feature = c(a.vehicle$VehicleProfileId[1], as.character(a.vehicle$SerialNumber[1]),
a.vehicle$RecordDate[1], nrow(a.vehicle), statDynamics(a.vehicle),
dynamic.stat(a.vehicle), trigger.features(a.vehicle), multinomial.dist(a.vehicle),
markov.chain.fit(a.vehicle), compute.cov(a.vehicle), compute.dynamic.cov(a.vehicle))
return(feature)
}
bleh = getFeatures(a.vehicle.copy)
bleh
bleh[1]
getwd()
setwd("/Users/mehrdadyazdani/")
mt = read.csv("./Desktop/Batch_1384255_batch_results.csv", header = TRUE, stringsAsFactors)
mt = read.csv("./Desktop/Batch_1384255_batch_results.csv", header = TRUE, stringsAsFactors = FALSE)
mt[,c("Input.image_url", "Answer.Tag1")] -> three.worker.res
reasonable.response = subset(three.worker.res, grepl("F", Answer.Tag1) | grepl("f", Answer.Tag1) | grepl("M", Answer.Tag1) | grepl("m", Answer.Tag1))
length(unique(three.worker.res$Input.image_url))
length(unique(reasonable.response$Input.image_url))
?grep
grepl("f", "3f")
grep("f", "3f")
grep("f", "f3")
grep("f", "f3", fixed = TRUE)
grepl("f", "f3", fixed = TRUE)
gregexpr(pattern ="f","3f")
gregexpr(pattern ="f","f3")
gregexpr(pattern ='f',"f3")
gregexpr(pattern ='f',"3f")
gregexpr(pattern ='f',"3f")[[1]][1]
source('~/Desktop/prepare_MT.R')
source('~/Desktop/prepare_MT.R')
head(reasonable.response)
?sub
source('~/Desktop/prepare_MT.R')
head(reasonable.response)
reasonable.response$age[1]
reasonable.response$gender = sapply(reasonable.response$Answer.Tag1, FUN = get.gender)
reasonable.response$age = sapply(reasonable.response$Answer.Tag1, FUN = get.age)
reasonable.response$age[1]
is.numeric(reasonable.response$age[1])
all.is.numeric(c('1','1.2','3'))
install.packages("Hmisc")
all.is.numeric(c('1','1.2','3'))
library(Hmisc)
all.is.numeric(c('1','1.2','3'))
all.is.numeric(c('1','1.2','3a'))
all.is.numeric(reasonable.response$age)
?all.is.numeric
as.numeric(c('1','1.2','3a'))
reasonable.response$age = as.numeric(sapply(reasonable.response$Answer.Tag1, FUN = get.age))
bad.entry = sapply(reasonable.response$Answer.Tag1, FUN = is.nan)
head(bad.entry)
which(bad.entry)
bad.entry = sapply(reasonable.response$Answer.Tag1, FUN = function(x) is.nan(as.numeric(x)))
warnings()
head(bad.entry)
which(bad.entry)
bad.entry = sapply(reasonable.response$Answer.Tag1, FUN = function(x) is.na(as.numeric(x)))
as.numeric(c('1','1.2','3a'))
is.na(as.numeric(c('1','1.2','3a')))
which(bad.entry)
head(bad.entry)
bad.entry = sapply(reasonable.response$age, FUN = function(x) is.na(as.numeric(x)))
head(bad.entry)
which(bad.entry)
reasonable.response[995,]
reasonable.response[995,]
reasonable.response[1119,]
reasonable.response[1717,]
reasonable.response[which(bad.entry),]
reasonable.response[which(bad.entry)[1],"age"]
reasonable.response[which(bad.entry)[1],"age"] = 17
reasonable.response[which(bad.entry)[2],"age"] = 25
reasonable.response[which(bad.entry)[3],"age"] = 32
reasonable.response[which(bad.entry)[4],"age"] = 32
reasonable.response[which(bad.entry)[5],"age"] = 25
reasonable.response[which(bad.entry),]
getwd()
write.csv(reasonable.response, file = "./Desktop/cleanedup_response.csv", quote = FALSE, row.names = FALSE)
?svd
library(randomForest)
?randomForest
setwd("/Users/mehrdadyazdani/Documents/projects/selfie/blogPosts/")
library(data.table)
library(ggplot2)
selfies.raw.tags = read.csv("../meta/tags.csv", header = TRUE, stringsAsFactors = FALSE)
ids = unique(selfies.raw.tags$id)
selfies.raw.tags.DT = data.table(selfies.raw.tags)
setkey(selfies.raw.tags.DT, id)
median.age = sapply(ids, FUN = function(x) median(selfies.raw.tags.DT[x]$age))
mean.age = sapply(ids, FUN = function(x) mean(selfies.raw.tags.DT[x]$age))
sd.age = sapply(ids, FUN = function(x) sd(selfies.raw.tags.DT[x]$age))
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
mode.gender = sapply(ids, FUN = function(x) Mode(selfies.raw.tags.DT[x]$gender))
cities = sapply(ids, FUN = function(x) selfies.raw.tags.DT[x]$city[1])
selfies.tags = data.frame(id = ids, median.age = median.age, mean.age = mean.age, sd.age= sd.age, mode.gender = mode.gender, city = cities)
levels(selfies.tags$city) = c("Bangkok", "Berlin", "Moscow", "New York", "Sao Paulo", "Tokyo")
levels(selfies.tags$mode.gender) = c("Female", "Male")
aggdata <-aggregate(selfies.tags$median.age, by = list(selfies.tags$city, selfies.tags$mode.gender), FUN = function(x) return(c(mean(x), length(x))))
aggdata
names(aggdata)
names(aggdata)[2]
names(aggdata)[2] = ""
names(aggdata)
ageplot = ggplot(aggdata, aes(x = "", y = x[,1], colour = Group.2)) + scale_colour_discrete(name = "Fancy Title") + geom_point(size = 5)
ageplot
?scale_color_discrete
