bad.entry = sapply(reasonable.response$age, FUN = function(x) is.na(as.numeric(x)))
head(bad.entry)
which(bad.entry)
reasonable.response[995,]
reasonable.response[995,]
reasonable.response[1119,]
reasonable.response[1717,]
reasonable.response[which(bad.entry),]
reasonable.response[which(bad.entry)[1],"age"]
reasonable.response[which(bad.entry)[1],"age"] = 17
reasonable.response[which(bad.entry)[2],"age"] = 25
reasonable.response[which(bad.entry)[3],"age"] = 32
reasonable.response[which(bad.entry)[4],"age"] = 32
reasonable.response[which(bad.entry)[5],"age"] = 25
reasonable.response[which(bad.entry),]
getwd()
write.csv(reasonable.response, file = "./Desktop/cleanedup_response.csv", quote = FALSE, row.names = FALSE)
?svd
library(randomForest)
?randomForest
setwd("/Users/mehrdadyazdani/Documents/DriveCam project/vehicleID/fromPC/scripts/")
load("../models/RFclassifier.Rda")
ls()
class(rf.simple.levels)
summary(rf.simple.levels)
rf.simple.levels$call
load("../models/RFclassifier_7_votes_most_cars.Rda")
ls()
rf.simple.levels$call
load("../models/RFclassifier_3_votes.Rda")
rf.simple.levels$call
load("../models/softmax_features_2-48.Rda")
ls9
ls()
summary(softmax.model)
softmax.model
names(softmax.model)
softmax.model$call
softmax.model$coefnames
load("../models/softmaxmodel_sub_optimal_features.Rda")
softmax.model$coefnames
source('~/Documents/DriveCam project/vehicleID/fromPC/scripts/test_softmax_sub_optimal.R')
source('~/.active-rstudio-document')
confusion.print.ready = function(x) {
x = cbind(x,diag(x)/apply(x, 1, sum), diag(x)/part2.dist, apply(x, 1, sum)/part2.dist)
x[,c(ncol(x)-2, ncol(x)-1, ncol(x))] = 100*x[,c(ncol(x)-2, ncol(x)-1, ncol(x))]
colnames(x)[c(ncol(x)-2, ncol(x)-1, ncol(x))] = c("Precision", "Recall", "Retrieved")
colnames(x)[c(1:5)] = c("Group 1", "Group 2", "Group 3", "Group 4", "Group 5")
rownames(x) = c("Group 1", "Group 2", "Group 3", "Group 4", "Group 5")
return(x)
}
confusion.1.vote = table(voting.list[[1]]$actual, voting.list[[1]]$prediction)
confusion.3.vote = table(voting.list[[3]]$actual, voting.list[[3]]$prediction)
confusion.7.vote = table(voting.list[[length(voting.list)]]$actual, voting.list[[length(voting.list)]]$prediction)
confusion.1.vote = confusion.print.ready(confusion.1.vote)
confusion.3.vote = confusion.print.ready(confusion.3.vote)
confusion.7.vote = confusion.print.ready(confusion.7.vote)
voting.high.confidence = lapply(voting.list, FUN = function(x) subset(x, x$prob > .9))
confusion.1.super = table(voting.high.confidence[[1]]$actual, voting.high.confidence[[1]]$prediction)
confusion.3.super = table(voting.high.confidence[[3]]$actual, voting.high.confidence[[3]]$prediction)
confusion.7.super = table(voting.high.confidence[[length(voting.high.confidence)]]$actual, voting.high.confidence[[length(voting.high.confidence)]]$prediction)
confusion.1.super = confusion.print.ready(confusion.1.super)
confusion.3.super = confusion.print.ready(confusion.3.super)
confusion.7.super = confusion.print.ready(confusion.7.super)
source('~/Documents/DriveCam project/vehicleID/fromPC/scripts/test_softmax_sub_optimal.R')
save(file = "../results/tes_softmax_subopt.Rda")
save.image("~/Documents/DriveCam project/vehicleID/fromPC/results/test_softmax_subopt.RData")
load("../results//test_softmax_subopt.RData")
setwd("/Users/mehrdadyazdani/Documents/projects/selfie/blogPosts/")
library(data.table)
library(ggplot2)
selfies.raw.tags = read.csv("../meta/tags.csv", header = TRUE, stringsAsFactors = FALSE)
ids = unique(selfies.raw.tags$id)
selfies.raw.tags.DT = data.table(selfies.raw.tags)
setkey(selfies.raw.tags.DT, id)
median.age = sapply(ids, FUN = function(x) median(selfies.raw.tags.DT[x]$age))
mean.age = sapply(ids, FUN = function(x) mean(selfies.raw.tags.DT[x]$age))
sd.age = sapply(ids, FUN = function(x) sd(selfies.raw.tags.DT[x]$age))
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
mode.gender = sapply(ids, FUN = function(x) Mode(selfies.raw.tags.DT[x]$gender))
cities = sapply(ids, FUN = function(x) selfies.raw.tags.DT[x]$city[1])
selfies.tags = data.frame(id = ids, median.age = median.age, mean.age = mean.age, sd.age= sd.age, mode.gender = mode.gender, city = cities)
levels(selfies.tags$city) = c("Bangkok", "Berlin", "Moscow", "New York", "Sao Paulo", "Tokyo")
levels(selfies.tags$mode.gender) = c("Female", "Male")
head(selfies.tags)
summary(selfies.tags$city)
30*2 + 4*20
setwd("/Users/mehrdadyazdani/Documents/DriveCam project/vehicleID/fromPC/scripts/")
source('~/Documents/DriveCam project/vehicleID/fromPC/scripts/test_softmax_opt.R')
head(voting.list)
confusion.7.super
library(gcookbook)
head(cabbage_exp)
nrow(cabbage_exp)
selfie_dist = data.frame(city =  c("Ban"))
cities = c("Bangkok", "Berlin", "Moscow", "New York", "Sao Paulo", "Tokyo")
selfie_dist = data.frame(city =  c(cities, cities))
selfie_dist
summary(selfies.tags$city)
num.images = c(20000, 20000, 20000, 30000, 20000, 30000)
summary(selfies.tags$city) -> rates
summary(selfies.tags$city) -> num.selfies
rates = c(num.selfies/num.images, 1 - num.selfies/num.images)
rates
?rap
?rep
rep("not-selfie", 6)
summary(selfies.tags$city) -> num.selfies
num.images = c(20000, 20000, 20000, 30000, 20000, 30000)
rates = c(num.selfies/num.images, 1 - num.selfies/num.images)
cities = c("Bangkok", "Berlin", "Moscow", "New York", "Sao Paulo", "Tokyo")
selfie_dist = data.frame(city =  c(cities, cities), rate = rates, tag = c(rep("selfie", 6), rep("not-selfie", 6)))
selfie_dist
nrow(selfies.tags)
head(selfies.tags)
aggdata = aggregate(selfies.tags$mode.gender, by = list(selfies.tags$city), FUN = function(x) return(c(length(x == "Male"), length(x == "Female"))))
aggdata
num.selfies
aggdata = aggregate(selfies.tags$mode.gender, by = list(selfies.tags$city, selfies.tags$mode.gender), FUN = function(x) return(c(length(x))))
aggdata
aggdata$rate = aggdata$x/c(num.images, num.images)
aggdata
aggdata$rate = 100*aggdata$x/c(num.images, num.images)
aggdata
setwd("/Users/mehrdadyazdani/Documents/projects/selfie/blogPosts/")
library(data.table)
library(ggplot2)
selfies.raw.tags = read.csv("../meta/tags.csv", header = TRUE, stringsAsFactors = FALSE)
ids = unique(selfies.raw.tags$id)
selfies.raw.tags.DT = data.table(selfies.raw.tags)
setkey(selfies.raw.tags.DT, id)
median.age = sapply(ids, FUN = function(x) median(selfies.raw.tags.DT[x]$age))
mean.age = sapply(ids, FUN = function(x) mean(selfies.raw.tags.DT[x]$age))
sd.age = sapply(ids, FUN = function(x) sd(selfies.raw.tags.DT[x]$age))
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
gender.agreement.level = function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))] / ux
}
mode.gender = sapply(ids, FUN = function(x) Mode(selfies.raw.tags.DT[x]$gender))
gender.conf = sapply(ids, FUN = function(x) gender.agreement.level(selfies.raw.tags.DT[x]$gender))
gender.agreement.level = function(x) {
ux <- unique(x)
length(which(x = ux[which.max(tabulate(match(x, ux)))] )/ length(x)
}
gender.agreement.level = function(x) {
ux <- unique(x)
length(which(x = ux[which.max(tabulate(match(x, ux)))] ))/ length(x)
}
mode.gender = sapply(ids, FUN = function(x) Mode(selfies.raw.tags.DT[x]$gender))
gender.conf = sapply(ids, FUN = function(x) gender.agreement.level(selfies.raw.tags.DT[x]$gender))
gender.agreement.level = function(x) {
ux <- unique(x)
length(which(x == ux[which.max(tabulate(match(x, ux)))] ))/ length(x)
}
gender.conf = sapply(ids, FUN = function(x) gender.agreement.level(selfies.raw.tags.DT[x]$gender))
cities = sapply(ids, FUN = function(x) selfies.raw.tags.DT[x]$city[1])
selfies.tags = data.frame(id = ids, median.age = median.age, mean.age = mean.age, sd.age= sd.age, mode.gender = mode.gender, gender.conf = gender.conf, city = cities)
levels(selfies.tags$city) = c("Bangkok", "Berlin", "Moscow", "New York", "Sao Paulo", "Tokyo")
levels(selfies.tags$mode.gender) = c("Female", "Male")
head(selfies.tags)
names(selfies.tags)
aggdata <-aggregate(selfies.tags$gender.conf, by = list(selfies.tags$city, selfies.tags$mode.gender), FUN = function(x) return(mean(x)))
aggdata
names(selfies.tags)
?geom_density
library(psych)
install.packages("psych")
library(psych)
ques.2 = data.frame(Subject = c(1:5))
ques.2
ques.2$Baseline = c(140, 138, 150, 148, 135)
ques.2$Week2 = c(132, 135, 151, 146, 130)
ques.2
ques.2$diff = ques.2$Baseline - ques.2$Week2
ques.2
t.test(ques.2$diff, alternative="two.sided", mu = 0)
t.test(ques.2$Baseline, ques.2$Week2, alternative="two.sided", mu = 0)
t.test(ques.2$diff, alternative="two.sided", mu = 0)
t.test(ques.2$Baseline, ques.2$Week2, alternative="two.sided", paired = TRUE)
?t.test
dt(9.7, 111.13)
sqrt(.5*(1.5*1.5 + 1.8*1.8))
sqrt(.5*(1.5*1.5 + 1.8*1.8))*sqrt(2)
-12/sqrt(.5*(1.5*1.5 + 1.8*1.8))*sqrt(2)
dt(-10.24295, 16)
?dt
source('~/Documents/DriveCam project/vehicleID/fromPC/scripts/test_softmax_opt.R')
confusion.7.super
confusion.mode.votes(voting.list, 7)
confusion.mode.votes = function(voting.list, num.votes) {
confusion.vote = table(voting.list[[num.votes]]$actual, voting.list[[num.votes]]$prediction)
return(confusion.print.ready(confusion.vote))
}
confusion.7.vote
confusion.mode.votes(voting.list, 7)
class(voting.list)
class(voting.list[[1]])
head(voting.list[[1]])
head(voting.list[[2]])
head(voting.list[[3]])
confusion.super.votes = function(voting.list, num.votes, thresh = .9) {
vote.thresh = lapply(voting.list, FUN = function(x) subset(x, x$prob > thresh))
return(confusion.mode.votes(vote.thresh, num.votes))
}
confusion.super.votes(voting.list, 7)
confusion.7.super
confusion.7.vote
confusion.super.votes(voting.list, 7, 0)
confusion.super.votes(voting.list, 3, 0)
confusion.3.vote
confusion.super.votes(voting.list, 3, .9)
confusion.super.votes(voting.list, 1, 0)
confusion.super.votes(voting.list, 0, 0)
confusion.super.votes(voting.list, 3, 0)
confusion.super.votes(voting.list, 7, 0)
confusion.super.votes(voting.list, 1, .9)
confusion.super.votes(voting.list, 3, .9)
confusion.super.votes(voting.list, 7, .9)
setwd("/Users/mehrdadyazdani/Documents/DriveCam project/vehicleID/fromPC/scripts/")
library(data.table)
library(nnet)
features.to.use = c(1,2:48, 79:86, 117:124, 155:162, 193:200, 231:238, 269:275, 307:393, 410:417, 418)  #***** this worked!!!!
test_path = "../processedData/part2_7_votes_confirm/"
load("../models/softmaxmodel_optimal_features_3_votes.Rda")
print("data setup")
files.to.read = list.files(test_path)
load(paste(test_path, files.to.read[1], sep = ""))
test.set = na.omit(features.DF[,features.to.use])
head(test.set)
summary(as.factor(test.set$VehicleProfileID))
length(files.to.read)
source('~/Documents/DriveCam project/vehicleID/fromPC/scripts/test_softmax_opt.R')
source('~/Documents/DriveCam project/vehicleID/fromPC/scripts/test_softmax_opt.R')
confusion.super.votes(voting.list, 1, 0)
source('~/Documents/DriveCam project/vehicleID/fromPC/scripts/test_softmax_opt.R')
confusion.super.votes(voting.list, 1, 0)
setwd("~/Desktop/testScripts/")
getwd()
source('~/Desktop/testScripts/print_confusion_matrix.R')
confusion.super.votes(voting.list, 1, 0)
source('~/Desktop/testScripts/print_confusion_matrix.R')
load("DeviceCountsAndPartitions.csv")
meta = read.csv("DeviceCountsAndPartitions.csv", header = TRUE, stringsAsFactors = FALSE)
head(meta)
summary(as.factor(meta[which(meta$Partition == 2), "VehicleProfileID"]))
class(meta$Partition)
head(meta[which(meta$Partition == 2), "VehicleProfileID"]))
head(meta[which(meta$Partition == 2), "VehicleProfileID"])
head(meta[meta$Partition == 2, "VehicleProfileID"])
head(meta[which(meta$Partition == 2), "VehicleProfileId"])
summary(as.factor(meta[which(meta$Partition == 2), "VehicleProfileId"]))
vehicle.dist = summary(as.factor(meta[which(meta$Partition == 2), "VehicleProfileId"]))
vehicle.dist
vehicle.dist["1"]
getwd()
setwd("~/Documents/projects/selfie/scripts/")
source('~/Documents/projects/selfie/scripts/modelingSelfies.R')
source('~/Documents/projects/selfie/scripts/modelingSelfies.R')
gender.logit
summary(gender.logit)
confint(gender.logit)
gender.logit = glm(combined_gender_guess ~ city + pose_yaw + pose_roll + pose_pitch + boundingbox_tl_y + boundingbox_tl_x + boundingbox_size_height + log(combined_age_guess), data = selfies.rek, family = "binomial")
summary(gender.logit)
with(gender.logit, pchisq(null.deviance - deviance, df.null - df.residual, lower.tail = FALSE))
gender.logit = glm(combined_gender_guess ~ city + pose_yaw + pose_roll + pose_pitch + log(boundingbox_tl_y) + log(boundingbox_tl_x) + log(boundingbox_size_height) + log(combined_age_guess), data = selfies.rek, family = "binomial")
gender.logit = glm(combined_gender_guess ~ city + pose_yaw + pose_roll + pose_pitch + log(boundingbox_tl_y+1) + log(boundingbox_tl_x+1) + log(boundingbox_size_height) + log(combined_age_guess), data = selfies.rek, family = "binomial")
gender.logit = glm(combined_gender_guess ~ city + pose_yaw + pose_roll + pose_pitch + log(boundingbox_tl_y+1) + log(boundingbox_tl_x+1) + log(boundingbox_size_height+1) + log(combined_age_guess), data = selfies.rek, family = "binomial")
summary(selfies.rek)
gender.logit = glm(combined_gender_guess ~ city + pose_yaw + pose_roll + pose_pitch + boundingbox_tl_y + boundingbox_tl_x + log(boundingbox_size_height+1) + log(combined_age_guess), data = selfies.rek, family = "binomial")
summary(gender.logit)
confint(gender.logit)
gender.logit = glm(combined_gender_guess ~ city + log(300+pose_yaw) + log(300+pose_roll) + log(300+pose_pitch) + log(100+boundingbox_tl_y) + log(100+boundingbox_tl_x) + log(boundingbox_size_height+1) + log(combined_age_guess), data = selfies.rek, family = "binomial")
summary(gender.logit)
names(gender.logit)
exp(coef(gender.logit))
exp(cbind(OR = coef(gender.logit), confint(gender.logit)))
summary(gender.logit)
gender.logit = glm(combined_gender_guess ~ city + log(abs(pose_yaw)) + log(abs(pose_roll)) + log(abs(pose_pitch)) + log(100+boundingbox_tl_y) + log(100+boundingbox_tl_x) + log(boundingbox_size_height+1) + log(combined_age_guess), data = selfies.rek, family = "binomial")
gender.logit = glm(combined_gender_guess ~ city + log(1+abs(pose_yaw)) + log(1+abs(pose_roll)) + log(1+abs(pose_pitch)) + log(100+boundingbox_tl_y) + log(100+boundingbox_tl_x) + log(boundingbox_size_height+1) + log(combined_age_guess), data = selfies.rek, family = "binomial")
summary(gender.logit)
gender.logit = glm(combined_gender_guess ~ log(1+abs(pose_yaw)) + log(1+abs(pose_roll)) + log(1+abs(pose_pitch)) + log(100+boundingbox_tl_y) + log(100+boundingbox_tl_x) + log(boundingbox_size_height+1) + log(combined_age_guess), data = selfies.rek, family = "binomial")
summary(gender.logit)
gender.logit = glm(combined_gender_guess ~ abs(pose_yaw) + abs(pose_roll) + abs(pose_pitch) + boundingbox_tl_y + boundingbox_tl_x + log(boundingbox_size_height+1) + log(combined_age_guess), data = selfies.rek, family = "binomial")
summary(gender.logit)
exp(cbind(OR = coef(gender.logit), confint(gender.logit)))
gender.logit = glm(combined_gender_guess ~ log(1+abs(pose_yaw)) + log(1+abs(pose_roll)) + log(1+abs(pose_pitch)) + boundingbox_tl_y + boundingbox_tl_x + log(boundingbox_size_height+1) + log(combined_age_guess), data = selfies.rek, family = "binomial")
exp(cbind(OR = coef(gender.logit), confint(gender.logit)))
gender.logit = glm(combined_gender_guess ~ log(1+abs(pose_yaw)) + log(1+abs(pose_roll)) + log(1+abs(pose_pitch)) + boundingbox_tl_y + boundingbox_tl_x + log(boundingbox_size_height+1) + combined_age_guess, data = selfies.rek, family = "binomial")
exp(cbind(OR = coef(gender.logit), confint(gender.logit)))
summary(selfies.rek)
levels(selfies.rek$combined_gender_guess)
levels(selfies.rek$combined_gender_guess) = c("Female", "Male")
levels(selfies.rek$combined_gender_guess)
summary(selfies.rek)
gender.logit = glm(combined_gender_guess ~ log(1+abs(pose_yaw)) + log(1+abs(pose_roll)) + log(1+abs(pose_pitch)) + boundingbox_tl_y + boundingbox_tl_x + log(boundingbox_size_height+1) + combined_age_guess, data = selfies.rek, family = "binomial")
summary(gender.logit)
exp(coef(gender.logit))
exp(cbind(OR = coef(gender.logit), confint(gender.logit)))
levels(selfies.rek$combined_gender_guess) = c(1, 0)
summary(selfies.rek)
gender.logit = glm(combined_gender_guess ~ log(1+abs(pose_yaw)) + log(1+abs(pose_roll)) + log(1+abs(pose_pitch)) + boundingbox_tl_y + boundingbox_tl_x + log(boundingbox_size_height+1) + combined_age_guess, data = selfies.rek, family = "binomial")
exp(cbind(OR = coef(gender.logit), confint(gender.logit)))
1/.85
summary(selfies.rek)
gender.logit = glm(combined_gender_guess ~ log(1+abs(pose_yaw)) + log(1+abs(pose_roll)) + log(1+abs(pose_pitch)) + boundingbox_tl_y + boundingbox_tl_x + log(boundingbox_size_height+1) + combined_age_guess, data = selfies.rek, family = "binomial")
exp(coef(gender.logit))
exp(cbind(OR = coef(gender.logit), confint(gender.logit)))
gender.logit = glm(combined_gender_guess ~ abs(pose_yaw) + abs(pose_roll) + abs(pose_pitch) + boundingbox_tl_y + boundingbox_tl_x + log(boundingbox_size_height+1) + combined_age_guess, data = selfies.rek, family = "binomial")
exp(cbind(OR = coef(gender.logit), confint(gender.logit)))
gender.logit = glm(combined_gender_guess ~ pose_yaw + pose_roll + pose_pitch + boundingbox_tl_y + boundingbox_tl_x + log(boundingbox_size_height+1) + combined_age_guess, data = selfies.rek, family = "binomial")
exp(cbind(OR = coef(gender.logit), confint(gender.logit)))
summary(gender.logit)
gender.logit = glm(combined_gender_guess ~ pose_yaw + pose_roll + pose_pitch + boundingbox_tl_y + boundingbox_tl_x + boundingbox_size_height + combined_age_guess, data = selfies.rek, family = "binomial")
exp(cbind(OR = coef(gender.logit), confint(gender.logit)))
summary(gender.logit)
gender.logit = glm(combined_gender_guess ~ pose_yaw + pose_roll + pose_pitch + boundingbox_tl_y + boundingbox_tl_x + boundingbox_size_height, data = selfies.rek, family = "binomial")
summary(gender.logit)
exp(cbind(OR = coef(gender.logit), confint(gender.logit)))
gender.logit = glm(combined_gender_guess ~ abs(pose_yaw) + abs(pose_roll) + abs(pose_pitch) + boundingbox_tl_y + boundingbox_tl_x + boundingbox_size_height, data = selfies.rek, family = "binomial")
exp(coef(gender.logit))
exp(cbind(OR = coef(gender.logit), confint(gender.logit)))
mt = read.csv("../meta/tags.csv", header = TRUE, stringsAsFactors = FALSE)
head(mt)
source('~/Documents/projects/selfie/scripts/modelingSelfies.R')
head(selfies.tags)
gender.mt = glm(mode.gender ~ city + median.age , data = selfies.rek, family = "binomial")
gender.mt = glm(mode.gender ~ city + median.age , data = selfies.tags, family = "binomial")
summary(gender.mt)
with(gender.mt, pchisq(null.deviance - deviance, df.null - df.residual, lower.tail = FALSE))
exp(cbind(OR = coef(gender.mt), confint(gender.mt)))
gender.mt = glm(mode.gender ~ city + log(median.age) , data = selfies.tags, family = "binomial")
exp(cbind(OR = coef(gender.mt), confint(gender.mt)))
levels(selfies.tags$mode.gender)
levels(selfies.tags$mode.gender) = c(1,0)
levels(selfies.tags$mode.gender)
levels(selfies.tags$mode.gender) = c(1,0)
gender.mt = glm(mode.gender ~ city + log(median.age) , data = selfies.tags, family = "binomial")
exp(cbind(OR = coef(gender.mt), confint(gender.mt)))
levels(selfies.tags$mode.gender) = c(0,1)
gender.mt = glm(mode.gender ~ city + log(median.age) , data = selfies.tags, family = "binomial")
exp(cbind(OR = coef(gender.mt), confint(gender.mt)))
summary(selfies.tags)
rlevel(selfies.tags$mode.gender) = c(1,0)
relevel(selfies.tags$mode.gender) = c(1,0)
levels(selfies.tags$mode.gender) = c("Female", "Male")
summary(selfies.tags)
relevel(selfies.tags$mode.gender, ref = 1)
summary(selfies.tags)
gender.mt = glm(mode.gender ~ city + log(median.age) , data = selfies.tags, family = "binomial")
exp(cbind(OR = coef(gender.mt), confint(gender.mt)))
1/.19
1/.304
1/.98
gender.mt = glm(mode.gender ~ city + median.age , data = selfies.tags, family = "binomial")
exp(cbind(OR = coef(gender.mt), confint(gender.mt)))
exp(cbind(OR = coef(gender.logit), confint(gender.logit)))
gender.logit = glm(combined_gender_guess ~ log(1+abs(pose_yaw)) + log(1+abs(pose_roll)) + log(1+abs(pose_pitch)) + boundingbox_tl_y + boundingbox_tl_x + boundingbox_size_height, data = selfies.rek, family = "binomial")
exp(cbind(OR = coef(gender.logit), confint(gender.logit)))
1/,88
1/.88
gender.logit = glm(combined_gender_guess ~ log(1+abs(pose_yaw)) + log(1+abs(pose_roll)) + log(1+abs(pose_pitch)) + boundingbox_tl_y + boundingbox_tl_x + log(1+boundingbox_size_height), data = selfies.rek, family = "binomial")
exp(cbind(OR = coef(gender.logit), confint(gender.logit)))
gender.logit = glm(combined_gender_guess ~ log(1+abs(pose_yaw)) + log(1+abs(pose_roll)) + log(1+abs(pose_pitch)) + boundingbox_tl_y**2 + boundingbox_tl_x + log(1+boundingbox_size_height), data = selfies.rek, family = "binomial")
exp(cbind(OR = coef(gender.logit), confint(gender.logit)))
2**3
gender.logit = glm(combined_gender_guess ~ log(1+abs(pose_yaw)) + log(1+abs(pose_roll)) + log(1+abs(pose_pitch)) + boundingbox_tl_y**2 + boundingbox_tl_x + log(1+boundingbox_size_height), data = selfies.rek, family = "binomial")
exp(cbind(OR = coef(gender.logit), confint(gender.logit)))
gender.logit = glm(combined_gender_guess ~ log(1+abs(pose_yaw)) + log(1+abs(pose_roll)) + log(1+abs(pose_pitch)) + boundingbox_tl_y*boundingbox_tl_y + boundingbox_tl_x + log(1+boundingbox_size_height), data = selfies.rek, family = "binomial")
exp(cbind(OR = coef(gender.logit), confint(gender.logit)))
gender.logit = glm(combined_gender_guess ~ log(1+abs(pose_yaw)) + log(1+abs(pose_roll)) + log(1+abs(pose_pitch)) + sqrt(boundingbox_tl_y**2 + boundingbox_tl_x**2) + log(1+boundingbox_size_height), data = selfies.rek, family = "binomial")
exp(cbind(OR = coef(gender.logit), confint(gender.logit)))
gender.logit = glm(combined_gender_guess ~ log(1+abs(pose_yaw)) + log(1+abs(pose_roll)) + log(1+abs(pose_pitch)) + log(1+sqrt(boundingbox_tl_y**2 + boundingbox_tl_x**2)) + log(1+boundingbox_size_height), data = selfies.rek, family = "binomial")
exp(cbind(OR = coef(gender.logit), confint(gender.logit)))
summary(selfies.rek)
summary(selfies.rekp[,c("pose_yaw", "pose_roll", "pose_pitch")])
summary(selfies.rek[,c("pose_yaw", "pose_roll", "pose_pitch")])
gender.logit = glm(combined_gender_guess ~ cos(pose_yaw) + log(1+abs(pose_roll)) + log(1+abs(pose_pitch)) + log(1+sqrt(boundingbox_tl_y**2 + boundingbox_tl_x**2)) + log(1+boundingbox_size_height), data = selfies.rek, family = "binomial")
exp(coef(gender.logit))
exp(cbind(OR = coef(gender.logit), confint(gender.logit)))
gender.logit = glm(combined_gender_guess ~ log(1+cos(pose_yaw)) + log(1+abs(pose_roll)) + log(1+abs(pose_pitch)) + log(1+sqrt(boundingbox_tl_y**2 + boundingbox_tl_x**2)) + log(1+boundingbox_size_height), data = selfies.rek, family = "binomial")
exp(cbind(OR = coef(gender.logit), confint(gender.logit)))
1/.72
gender.logit = glm(combined_gender_guess ~ log(1+cos(pose_yaw)) + log(1+cos(pose_roll)) + log(1+cos(pose_pitch)) + log(1+sqrt(boundingbox_tl_y**2 + boundingbox_tl_x**2)) + log(1+boundingbox_size_height), data = selfies.rek, family = "binomial")
exp(cbind(OR = coef(gender.logit), confint(gender.logit)))
gender.logit = glm(combined_gender_guess ~ log(1+cos(pose_yaw)) + cos(pose_roll) + cos(pose_pitch) + log(1+sqrt(boundingbox_tl_y**2 + boundingbox_tl_x**2)) + log(1+boundingbox_size_height), data = selfies.rek, family = "binomial")
exp(cbind(OR = coef(gender.logit), confint(gender.logit)))
gender.logit = glm(combined_gender_guess ~ cos(pose_yaw) + cos(pose_roll) + cos(pose_pitch) + log(1+sqrt(boundingbox_tl_y**2 + boundingbox_tl_x**2)) + log(1+boundingbox_size_height), data = selfies.rek, family = "binomial")
exp(cbind(OR = coef(gender.logit), confint(gender.logit)))
gender.logit = glm(combined_gender_guess ~ tan(pose_yaw) + tan(pose_roll) + tan(pose_pitch) + log(1+sqrt(boundingbox_tl_y**2 + boundingbox_tl_x**2)) + log(1+boundingbox_size_height), data = selfies.rek, family = "binomial")
exp(cbind(OR = coef(gender.logit), confint(gender.logit)))
gender.logit = glm(combined_gender_guess ~ log(1+tan(pose_yaw)) + log(1+tan(pose_roll)) + log(1+tan(pose_pitch)) + log(1+sqrt(boundingbox_tl_y**2 + boundingbox_tl_x**2)) + log(1+boundingbox_size_height), data = selfies.rek, family = "binomial")
gender.logit = glm(combined_gender_guess ~ log(10+tan(pose_yaw)) + log(10+tan(pose_roll)) + log(10+tan(pose_pitch)) + log(1+sqrt(boundingbox_tl_y**2 + boundingbox_tl_x**2)) + log(1+boundingbox_size_height), data = selfies.rek, family = "binomial")
gender.logit = glm(combined_gender_guess ~ log(100+tan(pose_yaw)) + log(100+tan(pose_roll)) + log(100+tan(pose_pitch)) + log(1+sqrt(boundingbox_tl_y**2 + boundingbox_tl_x**2)) + log(1+boundingbox_size_height), data = selfies.rek, family = "binomial")
gender.logit = glm(combined_gender_guess ~ log(1000+tan(pose_yaw)) + log(1000+tan(pose_roll)) + log(1000+tan(pose_pitch)) + log(1+sqrt(boundingbox_tl_y**2 + boundingbox_tl_x**2)) + log(1+boundingbox_size_height), data = selfies.rek, family = "binomial")
gender.logit = glm(combined_gender_guess ~ log(10000+tan(pose_yaw)) + log(10000+tan(pose_roll)) + log(10000+tan(pose_pitch)) + log(1+sqrt(boundingbox_tl_y**2 + boundingbox_tl_x**2)) + log(1+boundingbox_size_height), data = selfies.rek, family = "binomial")
exp(cbind(OR = coef(gender.logit), confint(gender.logit)))
gender.logit = glm(combined_gender_guess ~ log(abs(tan(pose_yaw))) + log(abstan(pose_roll))) + log(abs(tan(pose_pitch))) + log(1+sqrt(boundingbox_tl_y**2 + boundingbox_tl_x**2)) + log(1+boundingbox_size_height), data = selfies.rek, family = "binomial")
gender.logit = glm(combined_gender_guess ~ log(1+abs(tan(pose_yaw))) + log(1+abs(tan(pose_roll))) + log(1+abs(tan(pose_pitch))) + log(1+sqrt(boundingbox_tl_y**2 + boundingbox_tl_x**2)) + log(1+boundingbox_size_height), data = selfies.rek, family = "binomial")
exp(cbind(OR = coef(gender.logit), confint(gender.logit)))
gender.logit = glm(combined_gender_guess ~ log(1+abs(tan(pose_yaw))) + log(1+abs(tan(pose_roll))) + log(1+abs(tan(pose_pitch))) +
log(1+sqrt(boundingbox_tl_y**2 + boundingbox_tl_x**2)) +
tan(boundingbox_tl_y/boundingbox_tl_x) + log(1+boundingbox_size_height), data = selfies.rek, family = "binomial")
?tan
gender.logit = glm(combined_gender_guess ~ log(1+abs(tan(pose_yaw))) + log(1+abs(tan(pose_roll))) + log(1+abs(tan(pose_pitch))) +
log(1+sqrt(boundingbox_tl_y**2 + boundingbox_tl_x**2)) +
atan2(boundingbox_tl_y/boundingbox_tl_x) + log(1+boundingbox_size_height), data = selfies.rek, family = "binomial")
gender.logit = glm(combined_gender_guess ~ log(1+abs(tan(pose_yaw))) + log(1+abs(tan(pose_roll))) + log(1+abs(tan(pose_pitch))) +
log(1+sqrt(boundingbox_tl_y**2 + boundingbox_tl_x**2)) +
atan2(boundingbox_tl_y/boundingbox_tl_x) + log(1+boundingbox_size_height), data = selfies.rek, family = "binomial")
gender.logit = glm(combined_gender_guess ~ log(1+abs(tan(pose_yaw))) + log(1+abs(tan(pose_roll))) + log(1+abs(tan(pose_pitch))) +
log(1+sqrt(boundingbox_tl_y**2 + boundingbox_tl_x**2)) +
atan2(boundingbox_tl_y,boundingbox_tl_x) + log(1+boundingbox_size_height), data = selfies.rek, family = "binomial")
exp(cbind(OR = coef(gender.logit), confint(gender.logit)))
gender.logit = glm(combined_gender_guess ~ log(1+abs(tan(pose_yaw))) + log(1+abs(tan(pose_roll))) + log(1+abs(tan(pose_pitch))) +
log(1+sqrt(boundingbox_tl_y**2 + boundingbox_tl_x**2)) +
log(atan2(boundingbox_tl_y,boundingbox_tl_x)+1) + log(1+boundingbox_size_height), data = selfies.rek, family = "binomial")
gender.logit = glm(combined_gender_guess ~ log(1+abs(tan(pose_yaw))) + log(1+abs(tan(pose_roll))) + log(1+abs(tan(pose_pitch))) +
log(sqrt(boundingbox_tl_y**2 + boundingbox_tl_x**2)) +
atan2(boundingbox_tl_y,boundingbox_tl_x) + log(1+boundingbox_size_height), data = selfies.rek, family = "binomial")
summary(gender.logit)
exp(cbind(OR = coef(gender.logit), confint(gender.logit)))
mean(c(1.5475, 2.1988))
exp(cbind(OR = coef(gender.mt), confint(gender.mt)))
gender.mt = glm(mode.gender ~ city + log(median.age) , data = selfies.tags, family = "binomial")
exp(cbind(OR = coef(gender.mt), confint(gender.mt)))
1/.19
1/.3
exp(cbind(OR = coef(gender.logit), confint(gender.logit)))
source('~/Documents/projects/selfie/scripts/modelingSelfies_cities.R')
source('~/Documents/projects/selfie/scripts/modelingSelfies_cities.R')
class(selfies.rek$city)
summary(selfies.rek$city)
selfies.rek$city = relevel(selfies.rek$city, ref = "bangkok")
source('~/Documents/projects/selfie/scripts/modelingSelfies_cities.R')
summary(city.softmax)
exp(coef(city.softmax))
selfies.rek$city
levels(selfies.rek$city)
cities.to.compare = levels(selfies.rek$city)
cities.to.compare[1]
source('~/Documents/projects/selfie/scripts/modelingSelfies_cities.R')
source('~/Documents/projects/selfie/scripts/modelingSelfies_cities.R')
source('~/Documents/projects/selfie/scripts/modelingSelfies_cities.R')
source('~/Documents/projects/selfie/scripts/modelingSelfies_cities.R')
1/.6
1/0.6359158
namse(selfies.rek)
names(selfies.rek)
source('~/Documents/projects/selfie/scripts/modelingSelfies_cities.R')
source('~/Documents/projects/selfie/scripts/modelingSelfies_cities.R')
source('~/Documents/projects/selfie/scripts/modelingSelfies_cities.R')
source('~/Documents/projects/selfie/scripts/modelingSelfies_cities.R')
head(selfies.rek)
level(selfies.rek$combined_gender_guess)
levels(selfies.rek$combined_gender_guess)
summary(selfies.rek$combined_gender_guess)
source('~/Documents/projects/selfie/scripts/modelingSelfies_cities.R')
head(selfies.rek)
dses = data.frame(gender = c("Female", "Male"), facebox.size = mean(log(1+selfies.rek$boundingbox_size_height)))
predict(city.softmax, newdata = dses, "probs")
dses = data.frame(gender = c("Female", "Male"), boundingbox_size_height = mean(log(1+selfies.rek$boundingbox_size_height)))
predict(city.softmax, newdata = dses, "probs")
dses = data.frame(combined_age_guess = c("Female", "Male"), boundingbox_size_height = mean(log(1+selfies.rek$boundingbox_size_height)))
predict(city.softmax, newdata = dses, "probs")
mean(log(1+selfies.rek$boundingbox_size_height))
dses = data.frame(combined_age_guess = c("Female", "Male"), boundingbox_size_height = 4.17)
predict(city.softmax, newdata = dses, "probs")
dses = data.frame(combined_gender_guess = c("Female", "Male"), boundingbox_size_height = 4.17)
source('~/Documents/projects/selfie/scripts/modelingSelfies_cities.R')
predict(city.softmax, newdata = dses, "probs")
summary(log(1+boundingbox_size_height))
summary(log(1+selfies.rek$boundingbox_size_height))
summary(selfies.rek$boundingbox_size_height)
dbox = data.frame(combined_gender_guess = rep(c("Female", "Male"), each = 137-23+1), boundingbox_size_height = rep(log(1+c(23:137)), 2))
pp.box = cbind(dbox, predict(city.softmax, newdata = dbox, type = "probs", se = TRUE))
lpp = melt(pp.box, id.vars = c("combined_gender_guess", "boundingbox_size_height"), value.name = "probability")
library(ggplot2)
lpp = melt(pp.box, id.vars = c("combined_gender_guess", "boundingbox_size_height"), value.name = "probability")
library(reshape2)
lpp = melt(pp.box, id.vars = c("combined_gender_guess", "boundingbox_size_height"), value.name = "probability")
head(lpp)
ggplot2(lpp, aes(x = boundingbox_size_height, y = probability, colour = combined_gender_guess)) + geom_line() + facet_grid(variable ~ ., scales = "free")
library(ggplot2)
ggplot(lpp, aes(x = boundingbox_size_height, y = probability, colour = combined_gender_guess)) + geom_line() + facet_grid(variable ~ ., scales = "free")
exp(3)
ggplot(lpp, aes(x = exp(boundingbox_size_height), y = probability, colour = combined_gender_guess)) + geom_line() + facet_grid(variable ~ ., scales = "free")
source('~/Documents/projects/selfie/scripts/modelingSelfies_cities.R')
ggplot(lpp, aes(x = exp(boundingbox_size_height), y = probability, colour = combined_gender_guess)) + geom_line() + facet_grid(variable ~ ., scales = "free")
source('~/Documents/projects/selfie/scripts/modelingSelfies_cities.R')
ggplot(lpp, aes(x = exp(boundingbox_size_height), y = probability, colour = combined_gender_guess)) + geom_line() + facet_grid(variable ~ ., scales = "free")
source('~/Documents/projects/selfie/scripts/modelingSelfies_cities.R')
ggplot(lpp, aes(x = exp(boundingbox_size_height), y = probability, colour = combined_gender_guess)) + geom_line() + facet_grid(variable ~ ., scales = "free")
dses
predict(city.softmax, newdata=dses, "probs")
head(pp.box)
by(pp.box[,3:7, pp.box$combined_gender_guess, colMeans])
by(pp.box[,3:7], pp.box$combined_gender_guess, colMeans])
by(pp.box[,c(3:7)], pp.box$combined_gender_guess, colMeans])
by(pp.box[,c(3:7)], pp.box$combined_gender_guess, colMeans)
source('~/Documents/projects/selfie/scripts/modelingSelfies_cities.R')
source('~/Documents/projects/selfie/scripts/modelingSelfies_cities.R')
ggplot(lpp, aes(x = exp(boundingbox_size_height), y = probability, colour = combined_gender_guess)) + geom_line() + facet_grid(variable ~ ., scales = "free")
source('~/Documents/projects/selfie/scripts/modelingSelfies_cities.R')
ggplot(lpp, aes(x = exp(boundingbox_size_height), y = probability, colour = combined_gender_guess)) + geom_line() + facet_grid(variable ~ ., scales = "free")
ggplot(lpp, aes(x = exp(boundingbox_size_height), y = probability, colour = combined_gender_guess)) + geom_line() + facet_grid(variable ~ ., scales = "free") + xlab("Boundingbox size height")
